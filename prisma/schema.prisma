// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(150)
  firstName    String   @db.VarChar(150)
  lastName     String?  @db.VarChar(150)
  email        String   @unique
  password     String
  photoProfile String?
  coverPicture String?
  bio          String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         UserRole @default(USER)

  followers     Followings[]   @relation("Following")
  following     Followings[]   @relation("Followers")
  threads       Thread[]
  likedThreads  Likes[]
  threadReplies Reply[]
  Token         Token[]
  RefreshToken  RefreshToken[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

model Followings {
  follower   User     @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int
  followed   User     @relation("Following", fields: [followedId], references: [id], onDelete: Cascade)
  followedId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([followerId, followedId])
}

model Thread {
  id        Int      @id @default(autoincrement())
  content   String?  @db.Text
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  likes   Likes[]
  replies Reply[]

  @@map("threads")
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String?  @db.Text
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId Int

  @@map("replies")
}

model Likes {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, threadId])
}

model Token {
  id     Int       @id @default(autoincrement())
  token  String    @unique
  type   TokenType
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt Int

  @@map("tokens")
}

enum TokenType {
  VERIFY_TOKEN
  RESET_TOKEN
}

model RefreshToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  ipv6   String
  ipv4   String

  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("refresh_token")
}
